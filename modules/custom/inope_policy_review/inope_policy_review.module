<?php
/**
 * @file
 * The iNope Policy Review Module.
 */

/**
 * Implements hook_menu().
 */
function inope_policy_review_menu() {
  $items = array();

  $items['node/%node/review'] = array(
    'title callback' => 'inope_policy_review_tab_title_callback',
    'title arguments' => array(1),
    'description' => 'Review of policy nodes.',
    'page callback' => 'inope_policy_review_page',
    'page arguments' => array(1),
    'access arguments' => array('view inope policy review'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Creates the iNope policy review page title.
 *
 * The page title will be 'Review of @node_title' where @node_title is replaced
 * by the title of the object returned from node_load().
 *
 * @param object $node
 *   Object representing the current node passed from hook_menu.
 *
 * @return string
 *   String of characters to be used as the title in a menu local task for
 *   policy nodes.
 */
function inope_policy_review_tab_title_callback($node) {
  // Create the string to be used as the tab title.
  $title = t('Review of @node_title', array('@node_title' => $node->title));
  return $title;
}

/**
 * Creates the iNope policy review page.
 *
 * The page will call drupal_get_form() to load the inope_policy_review_form.
 *
 * @param object $node
 *   Object representing the current node passed from hook_menu.
 *
 * @return string
 *   String of characters to be used as the title in a menu local task for
 *   policy nodes.
 */
function inope_policy_review_page($node) {
  global $user;
  $account = $user;
  $build = array();

  // TODO: Ask client if they want previously submitted approval to be allowed
  // to be overwritten, this is the current functionality.
  $results = inope_policy_review_select_query($node, $account, 0);

  // TODO: When the form is rebuilt query above this doesn't pick up the new
  // entry.
  // If the active user has previously submitted something only display a
  // message.
  if (!empty($results)) {
    $build['message'] = array(
      '#type' => 'markup',
      '#markup' => t('Thank you for your feedback!
      Please check back often for additional review.'),
    );
  } 
  else {
    // If no results build a blank form
    $build['inope_policy_review_form'] 
      = drupal_get_form('inope_policy_review_form', $node);
  }

  return $build;
}

/**
 * Implements hook_permission().
 */
function inope_policy_review_permission() {
  return array(
    'view inope policy review' => array(
      'title' => t('View iNope Policy Review'),
      'description' => t('View the review tab on policy node pages'),
    ),
  );
}

/**
 * The iNope Policy Review Form.
 */
function inope_policy_review_form($form, &$form_state, $node) {
  global $user;

  $account = $user;

  // Create radio button options (approved or changes requested).
  $status = array(
    0 => t('I have reviewed this policy and approved it for use'),
    1 => t('I have reviewed this policy and would like to see changes'),
  );

  // Build the radio button.
  $form['inope_policy_review_status_radio'] = array(
    '#type' => 'radios',
    '#options' => $status,
    '#default_value' => 0,
  );

  // Create text area for feedback on changes requested option only.
  // Also, only required when the changes requested option is selected.
  $form['inope_policy_review_changes_requested_textarea'] = array(
    '#type' => 'textarea',
    '#title' => t('Changes Requested:'),
    '#default_value' => '',
    '#states' => array(
      'invisible' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 0),
      ),
      'visible' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 1),
      ),
      'required' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 1),
      ),
    ),
  );

  // Store argument from the autoloader in hook_menu().
  $node = $form_state['build_info']['args'][0];

  // Store the nid for future use, not displayed to the user.
  $form['inope_policy_review_hidden_nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  // Store the vid for future use, not displayed to the user.
  $form['inope_policy_review_hidden_vid'] = array(
    '#type' => 'hidden',
    '#value' => $node->vid,
  );

  // Store the uid for future use, not displayed to the user.
  $form['inope_policy_review_hidden_uid'] = array(
    '#type' => 'hidden',
    '#value' => $account->uid,
  );

  // Create the submit button.
  $form['inope_policy_review_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * The iNope Policy Review Form submit handler.
 */
function inope_policy_review_form_submit($form, &$form_state) {
  // Load objects from which their properties will be displayed.
  $account = user_load($form_state['values']['inope_policy_review_hidden_uid']);
  $node = node_load($form_state['values']['inope_policy_review_hidden_nid']);
  $text = check_plain($form_state['values']['inope_policy_review_changes_requested_textarea']);
  
  // If 'I have reviewed this policy and approved it for use' is selected.
  if ($form_state['values']['inope_policy_review_status_radio'] == 0) {

    $policy_review_id = inope_policy_review_insert_query($node, $account, '', 1);

    if ($policy_review_id != 0) {
      // Thank the user for their approval.
      drupal_set_message(
        t('Thank you @username for approving the policy', array(
          '@username' => $account->name,
        )));
    }
  }
  // If 'I have reviewed this policy and would like to see changes' is selected.
  elseif ($form_state['values']['inope_policy_review_status_radio'] == 1) {

    $policy_review_id = inope_policy_review_insert_query($node, $account, $text, 0);

    if ($policy_review_id != 0) {
      // Thank the user for their request.
      drupal_set_message(
        t('Thank you @username for submitting the following change request:', array(
          '@username' => $account->name,
        )));
      // Check_plain happened when this variable was declared.
      drupal_set_message($text);
    }
  }
  // If a bug is encountered.
  else {
    drupal_set_message(t('Form state not recognized'));
  }

  // Rebuild the form.
  $form_state['rebuild'] = TRUE;
}

/**
 * Select query for the current node policy review notes.
 * 
 * Query the policy review table for any records related to the current
 * node, note status, and are from the current user.
 */
function inope_policy_review_select_query($node, $account, $status) {
  
  $results = db_query(
    "SELECT * FROM {policy_review} WHERE nid = :nid AND note_status =
     :note_status AND uid = :uid ORDER BY note_submitted DESC", array(
      ':nid' => $node->nid,
      ':note_status' => $status,
      ':uid' => $account->uid,
    ))->fetchAll();
  
  return $results;
}

/**
 * Insert query to add a new policy review note or approve policy.
 * 
 * Only insert the new row if it is substantially a new request meaning that
 * some value other than the timestamp is different
 */
function inope_policy_review_insert_query($node, $account, $text, $status) {
  
  $results = inope_policy_review_select_query($node, $account, $status);
  
  // If the entry already exists don't duplicate it
  if (!empty($results) && 
      $results[0]->nid == $node->nid &&
      $results[0]->vid == $node->vid &&
      $results[0]->uid == $account->uid &&
      $results[0]->note_status == $status &&
      $results[0]->note == $text) {
    drupal_set_message(t('You have previously submitted this response.'));
    $policy_review_id = 0;
  }
  else {
    // Run an insert query on the policy review table for the new note.
    $policy_review_id = db_insert('policy_review')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'uid' => $account->uid,
        'note_status' => $status,
        'note_submitted' => time(),
        'note' => $text,
      ))
      ->execute();
  }
  
  return $policy_review_id;
}

/**
 * Update query if the user wants to update a record.
 * 
 * Currently this funtion is not called anywhere but it is avaliable for future 
 * use.
 */
function inope_policy_review_update_query($node, $account, $text, $timestamp) {
  
  // Run an update query on the policy review table to change the note.
  $updated_records = db_update('policy_review')
    ->fields(array(
      'note' => $text,
    ))
    ->condition('nid', $node->nid, '=')
    ->condition('uid', $account->uid, '=')
    ->condition('note_submitted', $timestamp, '=')
    ->execute();
  
  return $updated_records;
}
