<?php
/**
 * @file
 * The iNope Policy Review Module.
 */

/**
 * Implements hook_menu().
 */
function inope_policy_review_menu() {
  $items = array();

  $items['node/%/review'] = array(
    'title callback' => 'inope_policy_review_tab_title_callback',
    'title arguments' => array(1),
    'description' => 'Review of policy nodes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inope_policy_review_form'),
    'access arguments' => array('view inope policy review'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;

}

/**
 * Creates the iNope policy review page title.
 *
 * The page title will be 'Review of @node_title' where @node_title is replaced
 * by the title of the object returned from node_load().
 *
 * @param $nid
 *   String of numbers representing the node id passed from hook_menu.
 * @return
 *   String of characters to be used as the title in a menu local task for
 *   policy nodes.
 */
function inope_policy_review_tab_title_callback($nid) {
  $node = node_load($nid);
  $node_title = $node->title;
  $title = t('Review of @node_title', array('@node_title' => $node_title));
  return $title;
}


/**
 * Implements hook_permission().
 */
function inope_policy_review_permission() {
  return array(
    'view inope policy review' => array(
      'title' => t('View iNope Policy Review'),
      'description' => t('View the review tab on policy node pages'),
    ),
  );
}

/**
 * The iNope Policy Review Form.
 */
function inope_policy_review_form($form, &$form_state) {

  $status = array(
    0 => t('I have reviewed this policy and approved it for use'),
    1 => t('I have reviewed this policy and would like to see changes'),
  );

  $form['inope_policy_review_status_radio'] = array(
    '#type' => 'radios',
    '#options' => $status,
  );

  $form['inope_policy_review_changes_requested_textarea'] = array(
    '#type' => 'textarea',
    '#title' => t('Changes Requested:'),
    '#default_value' => '',
    '#states' => array(
      'invisible' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 0),
      ),
      'visible' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 1),
      ),
      'required' => array(
        ':input[name="inope_policy_review_status_radio"]' => array('value' => 1),
      ),
    ),
  );

  $form['inope_policy_review_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * The iNope Policy Review Form submit handler.
 */
function inope_policy_review_form_submit($form, &$form_state) {
  $account = $GLOBALS['user'];
  $node_id = array_slice(explode('/', check_plain($_GET['q'])), 1, 1);
  $node = node_load($node_id[0]);

  if ($form_state['values']['inope_policy_review_status_radio'] == 0) {
    drupal_set_message(t('Policy approved for use'));
  }
  elseif ($form_state['values']['inope_policy_review_status_radio'] == 1) {
    drupal_set_message(
      t('User : @userid : @username submitted the following change request:', array(
        '@userid' => $account->uid,
        '@username' => $account->name,
      )));

    drupal_set_message(check_plain(
      $form_state['values']['inope_policy_review_changes_requested_textarea']));

    drupal_set_message(t('Node ID : @nodeid', array('@nodeid' => $node->nid)));
    drupal_set_message(t('Node VID : @nodevid', array('@nodevid' => $node->vid)));
  }
  else {
    drupal_set_message(t('Form state not recognized'));
  }

  $form_state['rebuild'] = TRUE;
}
